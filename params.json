{
  "name": "Boxpacker",
  "tagline": "3D bin packing / knapsack problem solver",
  "body": "BoxPacker\r\n=========\r\n\r\nAn implementation of the 3D bin packing/knapsack problem i.e. given a list of items, how many boxes do you need to fit\r\nthem all in.\r\n\r\nEspecially useful for e.g. e-commerce contexts when you need to know box size/weight to calculate shipping costs.\r\n\r\n[![Build Status](https://travis-ci.org/dvdoug/BoxPacker.svg?branch=master)](https://travis-ci.org/dvdoug/BoxPacker)\r\n[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/dvdoug/BoxPacker/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/dvdoug/BoxPacker/?branch=master)\r\n[![Download count](https://img.shields.io/packagist/dt/dvdoug/boxpacker.svg)](https://packagist.org/packages/dvdoug/boxpacker)\r\n[![Download count](https://img.shields.io/packagist/v/dvdoug/boxpacker.svg)](https://packagist.org/packages/dvdoug/boxpacker)\r\n\r\n\r\n[Wikipedia](http://en.wikipedia.org/wiki/Bin_packing_problem) says this is NP-hard, and there is no way to always\r\nachieve an optimum solution without running through every single permutation. But that's OK because this implementation\r\nis designed to simulate a naive human approach to the problem rather than search for the \"perfect\" solution.\r\n\r\nThis is for 2 reasons:\r\n\r\n1. It's quicker\r\n2. It doesn't require the person actually packing the box to be given a 3D diagram\r\n   explaining just how the items are supposed to fit.\r\n\r\nPrinciples\r\n----------\r\n\r\n * Pack largest (by volume) items first\r\n * Pack vertically up the side of the box\r\n * Pack side-by-side where item under consideration fits alongside the previous item\r\n * Only very small overhangs are allowed (10%) to prevent items bending in transit\r\n * The available width/height for each layer will therefore decrease as the stack of items gets taller\r\n * If more than 1 box is needed to accommodate all of the items, then aim for boxes of roughly equal weight\r\n   (e.g. 3 medium size/weight boxes are better than 1 small light box and 2 that are large and heavy)\r\n\r\n\r\nInstallation\r\n------------\r\nIf you use [Composer](http://getcomposer.org/), just add `dvdoug/boxpacker` to your project's `composer.json` file:\r\n```json\r\n    {\r\n        \"require\": {\r\n            \"dvdoug/boxpacker\": \"^2.0\"\r\n        }\r\n    }\r\n```\r\n\r\nOtherwise, the library is PSR-4 compliant, so will work with the autoloader of your choice.\r\n\r\nUsage\r\n-----\r\nBoxPacker is designed to integrate as seamlessly as possible into your existing systems. To use the library, you will\r\nneed to implement the `BoxPacker\\Item` interface on your item/product objects and `BoxPacker\\Box` on the objects you use to to represent a box.\r\nThese interfaces are quite minimal, but provide a standardised way for the packing process to obtain the dimensional information it needs in order to work.\r\n\r\nBasic usage then looks something like the below:\r\n(although you'd probably want to do something more useful with the results than just output to the screen, and your dimensional data would hopefully come from a database!)\r\n\r\n```php\r\n\r\n  /*\r\n   * To figure out which boxes you need, and which items go into which box\r\n   */\r\n  $packer = new Packer();\r\n  $packer->addBox(new TestBox('Le petite box', 300, 300, 10, 10, 296, 296, 8, 1000));\r\n  $packer->addBox(new TestBox('Le grande box', 3000, 3000, 100, 100, 2960, 2960, 80, 10000));\r\n  $packer->addItem(new TestItem('Item 1', 250, 250, 2, 200, true));\r\n  $packer->addItem(new TestItem('Item 2', 250, 250, 2, 200, true));\r\n  $packer->addItem(new TestItem('Item 3', 250, 250, 2, 200, true));\r\n  $packedBoxes = $packer->pack();\r\n\r\n  echo(\"These items fitted into \" . count($packedBoxes) . \" box(es)\" . PHP_EOL);\r\n  foreach ($packedBoxes as $packedBox) {\r\n    $boxType = $packedBox->getBox(); // your own box object, in this case TestBox\r\n    echo(\"This box is a {$boxType->getReference()}, it is {$boxType->getOuterWidth()}mm wide, {$boxType->getOuterLength()}mm long and {$boxType->getOuterDepth()}mm high\" . PHP_EOL);\r\n    echo(\"The combined weight of this box and the items inside it is {$packedBox->getWeight()}g\" . PHP_EOL);\r\n\r\n    echo(\"The items in this box are:\" . PHP_EOL);\r\n    $itemsInTheBox = $packedBox->getItems();\r\n    foreach ($itemsInTheBox as $item) { // your own item object, in this case TestItem\r\n      echo($item->getDescription() . PHP_EOL);\r\n    }\r\n\r\n    echo(PHP_EOL);\r\n  }\r\n\r\n\r\n\r\n  /*\r\n   * To just see if a selection of items will fit into one specific box\r\n   */\r\n  $box = new TestBox('Le box', 300, 300, 10, 10, 296, 296, 8, 1000);\r\n\r\n  $items = new ItemList();\r\n  $items->insert(new TestItem('Item 1', 297, 296, 2, 200, true));\r\n  $items->insert(new TestItem('Item 2', 297, 296, 2, 500, true));\r\n  $items->insert(new TestItem('Item 3', 296, 296, 4, 290, true));\r\n\r\n  $volumePacker = new VolumePacker($box, $items);\r\n  $packedBox = $volumePacker->pack();\r\n  /* $packedBox->getItems() contains the items that fit */\r\n```\r\n\r\nBoxPacker is designed to run calculations as efficiently as possible, the 4500+ tests in the test suite run in 13\r\nseconds in the Ubuntu VM on my workstation, giving a rate of 350+ solutions/second which should be more than sufficient for\r\nmost e-commerce stores :) If you do wish to benchmark the library to evaluate performance in your own scenarios, please\r\ndisable Xdebug when doing so - in my experience the unit tests take 4.5x longer (11.9sec->54 sec) when Xdebug is loaded.\r\n\r\nRequirements\r\n------------\r\n\r\n* PHP version 5.4 or higher (including PHP7 and HHVM)\r\n\r\nLicense\r\n-------\r\nBoxPacker is MIT-licensed. \r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}